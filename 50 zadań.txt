#zadanie 1

#lista niepowtarzalnych elementów
#do jej sprawdzania s³u¿y funkcja set
A=[1,2,3,3,2,1,2,3] #[1,2,3]

B=[]

for element in A:
    if element not in B:
        B.append(element)
print(B)

#albo

B=list(set(A))
print(B)


A=[1,1,1,1,2,2,2,3,3,3,4,5,78,3,6,2,5,3]
print(f'Lista A sk³ada siê z {len(A)} elementów')
print('\n')
print(f'Lista A: {A}')
B=list(set(A))
print(f'Lista B: {B}')
print('\n')
print(f'Lista B sk³ada siê z {len(B)} elementów')

#zadanie 2
#modyfikacja string
#string s¹ niemodyfikowalne, listê mo¿na modyfikowaæ
#aby zmodyfikowaæ string trzeba go najpierw zamieniæ na listê a póŸniej na string
a='abcdefg'

new_a=list(a)
print(new_a)
new_a[1]='X'
print(new_a)

a=''.join(new_a) # po³¹czenie elementów listy w ci¹gu do stringa
print(a)

#zadanie 3
#napisz kod, który zaprezentuje najwa¿niejsze ró¿nice miêdzy list¹ a tupl¹
L=[1,2,3,True, (1,2)]
T=(1,2,3,False,[1,'x','y'])

L[1]='emil'
print(L)

T[1]='emil'
print(T)

#zadanie 4
# szafki, która ma 3 szuflady, a w ka¿dej z nich 3 przegródki?
# Stwórz taki model i umieœæ stringa "d³ugopis"
# w œrodkowej przegródce œrodkowej szuflady.
szafka=[[[],[],[]],[[],[],[]],[[],[],[]]]

szafka[1][1]='d³ugopis'
print(szafka)

A=[[1,2],[3,4]]
A[1][0]='trzy'
print(A)

#zadanie 5
#z poni¿szej listy wypisz stringa 'schowany'

L = [[34, False], [0], [('abc', 123), {'a': 1, 'x': (True, 'schowany', 5)}]]
print(L[2][1]['x'][1])

#zadanie 6
#jakiej struktury danych u¿y³byœ do zapisania numerów telefonów
# wszystkich klientów firmy i odpowiadaj¹cych im nazwisk. Wybierz strukturê tak,
# aby sprawdzenie w³aœciciela numeru telefonu nie zajmowa³o du¿o czasu.

# Nastêpnie stwórz przyk³adow¹ strukturê przechowuj¹c¹ poni¿sze informacje:
# 123456789 - Jan Kot
# 999888777 - Anna Lis
# 111222333 - Jan Kot
# Odczytaj nazwisko w³aœciciela numeru 12345678
D={123456789:'Jan Kot', 123456787:'Anna Lis',123456765:'Jan Kot'}
print(D[123456789])

#zadanie 7
#które z poni¿szych s³owników zosta³y utworzone nieprawid³owo?
A = {1: 1, 2: 4, 3: 9}
B = {'imie': 'Anna', 'nazwisko': 'Kowalska'}
# C = {[4, 5]: [16, 25]}    # lista jako element mutowalny nie mo¿e byc kluczem s³ownika!
D = {(4, 5): [16, 25]}
# E = {{1:2}: 'jeden_dwa'}  # s³ownik jako element mutowalny równiez nie mo¿e byæ kluczem!

#zadanie 8
#co zostanie wypisane w wyniku poni¿szego kodu?
D={1:'Ala',2:'ma',3:'kota'}

for key in D:
    print(D[key])
#wypisane zostaj¹ key. Zale¿y to od wersji pythona
#w pythonie 2-3.5 s³ownik nie trzyma kolejnoœci
#w pythonie 3.6 i nowsze, s³ownik trzyma kolejnoœæ

#zadanie 9
# dla danego stringa x stwórz s³ownik
# przechowuj¹cy informacjê ile razy dana litera wyst¹pi³a w stringu
x='myszy dokazuj¹gdykotanieczuj¹'
D={}
for litera in x:
    if litera not in D.keys():
        D[litera]=1
    else:
        D[litera]+=1
print(D)

#lub
#sprawdŸ czy 7430 znajduje siê w zmiennej S
S = {x:x+1 for x in range(10000) if x%23 == 0}

print(S)
if 7430 in S.keys():
    print(True)
else:
    print(False)

#zadanie 10
#sprawdŸ czy któraœ z liter wyst¹pi³a w stringu 4 razy
#jeœli tak, wypisz True, je¿lie nie, wypisz False
litery = {'m': 1, 'y': 3, 's': 1, 'z': 3, 'd': 2, 'o': 2, \
          'k': 2, 'a': 2, 'u': 2, 'j': 2, '¹': 2, 'g': 1, \
          't': 1, 'n': 1, 'i': 1, 'e': 1, 'c': 1}

print(list(litery.values()))
print(list(litery.keys()))

if 4 in litery.values():
    print(True)
else:
    print(False)

#lub

print(True if 4 in litery.values() else False)


pensje = {'ksiegowa': 5000, 'kierowca': 4500, 'recepcjonistka': 4000}
#print(sum(pensje.values()))
sum_pensji=sum(pensje.values())
print(f'Suma pensji wynosi {sum_pensji} z³')

#zadanie 11
#wydrukuj listê w kolejnoœci odwróconej
jêzyki=['Python','Java','C#','Ruby']

#1
jêzyki.reverse() #wada, odwrócona zosta³a tak¿e lista oryginalna
print(jêzyki)
#lub
jêzyki_odwrócone=jêzyki
print(jêzyki_odwrócone)

#2
jêzyki_odwrócone=list(reversed(jêzyki))
print(jêzyki)

#3
jêzyki_odwrócone=jêzyki[::-1]
print(jêzyki)

#4
jêzyki_odwrócone=[]
for jêzyki in jêzyki:
    jêzyki_odwrócone.insert(0,jêzyki)
print(jêzyki_odwrócone)

#zadanie 12
#sprawdŸ czy podane s³owo jest palindromem (mo¿ne je czytaæ tak saomo od przodu i ty³u)
def new (slowo):
    new=slowo[::-1]
    if slowo==new:
        return True
    else:
        return False

print(new('kajak'))
print(new('emil'))

#zadanie 13
# stwórz dwie listy:
# A - zawieraj¹c¹ liczby od 1 do 10
# B - zawieraj¹c¹ co trzeci¹ liczbê z zakresu od 100 do 1
# w obu przypadkach mo¿esz napisaæ tylko jedn¹ linijkê kodu

A=list(range(1,11))
print(A)

B=list(range(100,0,-3))
print(B)

# w python 3.0 range jest obiektem
# w pythonie poni¿ej 3.0 range to funkcja\


# Stwórz listê R zawieraj¹c¹ co drug¹ liczbê z zakresu od -5 do 5 (w³¹cznie).
R = list(range(-5,6,2))
print(R)

#zadanie 14
# Wypisz pierwsze 5 elementów listy L.
# Wypisz co drug¹ literê stringa s, zaczynaj¹c od ostatniej i cofaj¹c siê do poczatku.

L = [11, 22, 33, 44, 55, 66, 77, 88, 99, 1010]
s = 'a nMozh^tKysPW 9êxi b$uML'

print(L[:5])
print(s[-1::-2])


# Wypisz co trzeci¹ literê stringa a, zaczynaj¹c od przedostatniej i cofaj¹c siê do poczatku.
a = '!ooe&sj7?czaa()lmxuo,t2fa^4rtngk'
print(a[-2::-3])

#zadanie 15
# napisz funkcjê, która sprawdzi czy podany string
# zaczyna siê s³owem "python" i koñczy rozszerzeniem ".py"
# Przetestuj ni¹ stringi:
a = "python_moj_kod.py"
b = "python_notatki.txt"

def sprawdz_czy_python(nazwa_pliku):
    if nazwa_pliku[:6]== 'python' and nazwa_pliku[-3:]=='.py':
        return True
    else:
        return False

print(sprawdz_czy_python(a))
print(sprawdz_czy_python(b))

# Napisz kod, który przy u¿yciu sliceów wypisze SZEŒÆ ostatnich znaków ze stringa z.
z = "In the face of ambiguity, refuse the temptation to guess."
print(z[-6:])

#zadanie 16
#wypisz podan¹ listê imion przed ka¿dym dodaj¹c kolejny numer.
# Zacznij numerowanie od 1.

imiona = ['Adam', 'Stanis³aw', 'Maria', 'Zofia', 'Miko³aj']

numer=1
for imie in imiona:
    print(numer,imie)
    numer+=1

print('\n')
#lub

for numer, imie in enumerate(imiona):
    print(numer+1,imie)

# Wypisz zawartoœæ listy A dodaj¹c przed ka¿dym elementem kolejny numer.
# Zacznij numerowanie od 0.

A = [1, 1, 4, 9]

for numer, cyfra in enumerate(A):
    print(numer+1,cyfra)

#zadanie 17
# znajdŸ ró¿nicê miêdzy najwiêksz¹ a najmniejsz¹ wartoœci¹
# na poni¿szej liœcie.
# Zadbaj o to aby rozwi¹zanie by³o efektywne.

A = [4, 5, 7, -3, 2, 8, -10, 15]

A.sort()
print(A)
print(min(A))
print(max(A))
print(A[-1]-A[0])
#lub
print(max(A)-min(A))

# SprawdŸ i wypisz (True lub False) czy najwiêkszy element na liœcie A jest wiêkszy ni¿ liczba 99.

A = [x**2 + 3 for x in range(10)]

print(A)
c=max(A)
print(c)

if c >99:
    print(True)
else:
    print(False)
#lub
print(True if max(A) > 99 else False)

#zadanie 18
# napisz funkcjê, która bêdzie pobieraæ dwie liczby
# i sprawdzaæ czy pierwsza z nich jest podzielna przez drug¹

#dzielenie modulo. U¿ywa siê po to aby sprawdziæ czy jedna liczba jest podzielna przez drug¹
print(10%2)
print(10%3)

def sprawdz_podzielnosc(a,b):
    return (a % b==0)

print(sprawdz_podzielnosc(10,2))
print(sprawdz_podzielnosc(10,3))

# SprawdŸ czy liczba a jest podzielna przez b. Jeœli tak - wypisz True, jeœli nie - False.

a = 123454321
b = 11111

print(sprawdz_podzielnosc(a,b))

#zadanie 19
#  wyjasnij jak dzia³a poni¿sza funkcja.
# Wyjaœnij sk¹d wziê³y siê wyniki zwrócone przez poszczególne wywo³ania funkcji.

def dodaj_do_listy(n, lista=[]):  # lista=[] - argument domyœlny funkcji
    lista.append(n)               # dodaj n do koñca listy lista
    print(lista)

dodaj_do_listy(1)
dodaj_do_listy(2)
dodaj_do_listy('emil')
dodaj_do_listy(4,[1,2])
dodaj_do_listy(5)

#lub
def imie (imie='Emil'):
    print(imie)
imie()

#zadanie 20
#co otrzymamy w wyniku wydrukowania zawartoœci poni¿szych zmiennych?
#list comprehension pozwalaj¹ na tworzenie kodów w jednej linijce

L = [1,2,3,4,5,6]

L1 = [x for x in range(5)]        # wpisz do listy L1 elementy z zakresu od 0 do 4
L2 = [x**2 for x in L]            # wpisz do listy L2 elementy z listy L podniesione do kwadratu
L3 = [x for x in L if x % 2 == 0] # wpisz do listy L3 elementy z listy L, tylko jeœli dany element jest podzielny przez 2
L4 = ['Parzysta' if x%2 == 0 else 'Nieparzysta' for x in range(5)]
                                  # wpisz do listy L4 'Parzysta' lub 'Nieparzysta' w zale¿noœci od tego czy kolejny element
                                  # z zakresu 0 do 4 jest podzielny lub nie jest podzielny przez 2
L5 = [(x, x+10) for x in L]       # wpisz do listy L5 dwuelementowe tuple, które na indeksie 0 maj¹ kolejny element z lsty L
                                  # a na indeksie 1 ten sam element zwiêkszony o 10
D1 = {x:x % 2 == 0 for x in L}    # wpisz do s³ownika D1 pary klucz:wartoœæ, gdzie kluczem s¹ elementy z listy L
                                  # a wartoœciami True lub False, w zale¿noœci od tego czy dany klucz jest podzielny przez 2

print(L1)
print(L2)
print(L3)
print(L4)
print(L5)

#zadanie 21
# co wydrukuje siê w wyniku wykonania poni¿szego kodu?

print(1 == True) # == to operator porównania wartoœci
print(1 is True) # is to operator porównania identycznoœci/to¿samoœci

print(id(1), id(1), id(True))  # wydrukuj id integera 1 i booleana True

print(2 ** 3 == 10 - 2)        # wydrukuj wynik porównania wartoœci dwóch równañ

A = [1,2,3]                    # stworzenie dwóch list o identycznej zawartoœci
B = [1,2,3]                    # i przypisanych do innych zmiennych A i B
print(A == B)                  # porównanie wartoœci list A i B
print(A is B)                  # porównanie identycznoœci/to¿samoœli list A i B

a = 'kotek'                    # stworzenie dwóch stringów o identycznej zawartoœci
b = 'kotek'                    # i przypisanych do innych zmiennych a i b
print(a == b)                  # porównanie wartoœci stringów a i b
print(a is b)                  # porównanie identycznoœci/to¿samoœci stringów a i b

#zadanie 22
#co zostanie wydrukowane
print(False is False)
print(True is False)
print(False is False is False) #porównanie ³añcuchowe
print(1<3==5)
print(3+2>5<6)

# zadanie 23
# czym jest lambda?
# Napisz przyk³adowy kod wykorzystuj¹cy lambdê.

# lambda argument : wyra¿enie
# lambda x:x+2
#sortowanie po key
L = [('Anna',82), ('Robert',33), ('Artur',40), ('Feliks',56)]
L_posortowana=sorted(L, key=lambda x:x[1])
print(L_posortowana)

# Posortuj podan¹ listê stringów jako kryterium sortowania przyjmuj¹c ostatni¹ literê ka¿dego stringa.
S = ['Anna', 'Robert', 'Artur', 'Feliks']
S_posortowana =sorted(S, key= lambda x:x[-1])
print(S_posortowana)

#zadanie 24
# co zostanie wypisane w wyniku wykonania poni¿szego kodu?
A=[1,2,3,4,5]
B=A
C=A[:]
B[0]=111
print(B)
print(A)
print(C)

print(id(A))
print(id(B))
print(id(C))

L=[0,1,2,3]

K=L[:] #kopia listy L
L[1]='jeden'
K[1]='JEDEN'

print(L)
print(K)

#zadanie 25
# co zostanie wypisane w wyniku wykonania poni¿szego kodu?

x = 10             # zmienna globalna

def f():
    x=11    #zmianna lokalna, istnieje tylko wewn¹trz funkcji
    print(x)

f()
print(x)

#zadanie 26
# - stwórz plik o nazwie "moj_plik.txt"
# - wpisz do niego liczb od 1 do 100, ka¿d¹ w nowej linijce
# - otwórz plik i zapisz jego zawartosc do listy z_pliku

with open('moj_plik.txt','w') as f:
   for n in range(1,101):
       f.write(str(n) + '\n')

with open('moj_plik.txt','r') as f:
    z_pliku=f.readline()

print(z_pliku)

#odczytywanie pliku
with open ('przeczytaj_mnie.txt','r') as f:
    print(f.read())

# Zadanie 27
# Objêtoœæ graniastos³upa oblicza siê na podstawie wzoru: V = a * b * h
# a i b to d³ugoœci boków jego podstawy, a h to wysokoœæ.
# Poni¿szy kod znajduje najwiêkszy graniastos³up jaki mo¿emy utworzyæ
# z elementów list A, B i H.
# Ile operacji zostane wykonane w wyniku uruchomienia tego kodu?
# W jaki sposób mo¿na by to zadanie rozwi¹zaæ bardziej efektywnie?

import random
A = [random.randint(0,100) for i in range(5)]     # tworzenie piêcioelementowej listy losowych integerów z zakresu od 0 do 100
B = [random.randint(0,100) for i in range(5)]
H = [random.randint(0,100) for i in range(5)]

print(A)
print(B)
print(H)

max_v = 0                                         # zmienna do przechowywania maksymalnej znalezionej objêtoœci graniastos³upa
for a in A:                                       # dla ka¿dego elementu w liœcie A
    for b in B:                                   # dla ka¿dego elementu w liœcie B
        for h in H:                               # dla ka¿dego elementu w liœcie H
            if a * b * h > max_v: # 125 operacji  # jeœli a*b*h jest wiêksze ni¿ maksymalna znaleziona objêtoœæ
                max_v = a * b * h                 # do zmiennej max_v przypisz wynik mno¿enia a*b*h
print(max_v)


print(max(A) * max(B) * max(H)) # 15 operacji     # pomnó¿ przez siebie najwiêksze elementy list A, B i H

# uproszczenie zagnie¿dzonych pêtli for mo¿liwe przy u¿yciu biblioteki itertools

# wiêcej w materia³ach dodatkowych


#zadanie  28